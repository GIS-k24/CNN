"""
环境：
      torch                         1.2.0+cpu
      torchvision                   0.4.0+cpu
      
GoogleNet的网络结构不同：由多个子块构成，每个子块有：
特征提取|扩大感受野|减少通道数|改变结构

特征提取：1 * 1的卷积
扩大感受野：3 * 3的卷积和5 * 5的卷积（前者提取小特征，后者提取大特征）
减少通道数：1 * 1的卷积
改变结构：3 * 3的池化层

同理：GoogleNet由多个子块构成，因此适合使用循环搭建网络
"""

import numpy as np
import torch
from torch import nn
from torch.autograd import Variable
from torchvision.datasets import CIFAR10
from torch.utils.data import DataLoader


def conv_relu(in_channel, out_channel, kernel, stride=1, padding=0):
    layer = nn.Sequential(
        nn.Conv2d(in_channel, out_channel, kernel, stride, padding),
        nn.BatchNorm2d(out_channel, eps=1e-3),  # 数据标准化
        nn.ReLU()
    )
    return layer


class inception(nn.Module):
    def __init__(self, in_channel, out1_1, out2_1, out2_3, out3_1, out3_5, out4_1):
        super(inception, self).__init__()

        # 第一条线路
        self.branch1_1 = conv_relu(in_channel, out1_1, 1)

        # 第二条线路
        self.branch3_3 = nn.Sequential(
            conv_relu(in_channel, out2_1, 1),
            conv_relu(out2_1, out2_3, 3, padding=1)
        )

        # 第三条线路
        self.branch5_5 = nn.Sequential(
            conv_relu(in_channel, out3_1, 1),
            conv_relu(out3_1, out3_5, 5, padding=2)
        )

        # 第四条线路
        self.branch_pool = nn.Sequential(
            nn.MaxPool2d(3, stride=1, padding=1),
            conv_relu(in_channel, out4_1, 1)
        )

    def forward(self, x):
        f1 = self.branch1_1(x)
        f2 = self.branch3_3(x)
        f3 = self.branch5_5(x)
        f4 = self.branch_pool(x)
        output = torch.cat((f1, f2, f3, f4), dim=1)  # 网络的拼接操作
        return output


"""
# demo测试
test_net = inception(3, 64, 48, 64, 64, 96, 32)
test_x = Variable(torch.zeros(1, 3, 96, 96))
print('input shape:{}*{}*{}'.format(test_x.shape[1], test_x.shape[2], test_x.shape[3]))
result_x = test_net(test_x)
print('input shape:{}*{}*{}'.format(result_x.shape[1], result_x.shape[2], result_x.shape[3]))
"""


class googlenet(nn.Module):
    def __init__(self, in_channel, num_classes, verbose=False):
        super(googlenet, self).__init__()
        self.verbose = verbose

        self.block1 = nn.Sequential(
            conv_relu(in_channel, out_channel=64, kernel=7, stride=2, padding=3),
            nn.MaxPool2d(3, 2)
        )

        self.block2 = nn.Sequential(
            conv_relu(64, 64, kernel=1),
            conv_relu(64, 192, kernel=3, padding=1),
            nn.MaxPool2d(3, 2)
        )

        self.block3 = nn.Sequential(
            inception(192, 64, 96, 128, 16, 32, 32),
            inception(256, 128, 128, 192, 32, 96, 64),
            nn.MaxPool2d(3, 2)
        )

        self.block4 = nn.Sequential(
            inception(480, 192, 96, 208, 16, 48, 64),
            inception(512, 160, 112, 224, 24, 64, 64),
            inception(512, 128, 128, 256, 24, 64, 64),
            inception(512, 112, 144, 288, 32, 64, 64),
            inception(528, 256, 160, 320, 32, 128, 128),
            nn.MaxPool2d(3, 2)
        )

        self.block5 = nn.Sequential(
            inception(832, 256, 160, 320, 32, 128, 128),
            inception(832, 384, 182, 384, 48, 128, 128),
            nn.AvgPool2d(2)
        )

        self.classifier = nn.Linear(1024, num_classes)

    def forward(self, x):
        x = self.block1(x)
        if self.verbose:
            print('block 1 output: {}'.format(x.shape))
        x = self.block2(x)
        if self.verbose:
            print('block 2 output: {}'.format(x.shape))
        x = self.block3(x)
        if self.verbose:
            print('block 3 output: {}'.format(x.shape))
        x = self.block4(x)
        if self.verbose:
            print('block 4 output: {}'.format(x.shape))
        x = self.block5(x)
        if self.verbose:
            print('block 5 output: {}'.format(x.shape))
        x = x.view(x.shape[0], -1)
        x = self.classifier(x)
        return x


"""
# demo测试
test_net = googlenet(3, 10, True)
test_x = Variable(torch.zeros(1, 3, 96, 96))
result_x = test_net(test_x)
print('output:{}'.format(result_x.shape))
"""


def data_tf(x):
    x = x.resize((96, 96), 2)  # 将图片放大到96 * 96
    x = np.array(x, dtype='float32') / 255
    x = (x - 0.5) / 0.5
    x = x.transpose((2, 0, 1))
    x = torch.from_numpy(x)
    return x


train_set = CIFAR10(
    root='D:\编程\python\PyTorch\img',
    train=True,
    transform=data_tf
)
train_data = DataLoader(
    dataset=train_set,
    batch_size=64,
    shuffle=True
)
test_set = CIFAR10(
    root='D:\编程\python\PyTorch\img',
    train=False,
    transform=data_tf
)
test_data = DataLoader(
    dataset=test_set,
    batch_size=128,
    shuffle=False
)

net = googlenet(3, 10)

optimizer = torch.optim.SGD(net.parameters(), lr=0.01)
criterion = nn.CrossEntropyLoss()

for e in range(20):
    train_loss = 0
    for im, label in train_data:
        im = Variable(im)
        label = Variable(label)

        out = net(im)
        loss = criterion(out, label)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
    print('epoch:{},Train Loss:{:.6f}'.format(e, train_loss / len(train_data)))
